<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop
	                       http://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 自动扫描 -->
    <context:component-scan base-package="com.xskq" />

    <!-- 配置读取properties文件jdbc.properties以连接数据库 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 阿里 druid 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 数据库基本信息配置 -->
        <property name="url" value = "${url}" />
        <property name="username" value = "${username}" />
        <property name="password" value = "${password}" />
        <property name="driverClassName" value = "${driverClassName}" />
        <property name="filters" value = "${filters}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value = "${maxActive}" />
        <!-- 初始化连接数量 -->
        <property name="initialSize" value = "${initialSize}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value = "${maxWait}" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value = "${minIdle}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value = "${validationQuery}" />
        <property name="testWhileIdle" value = "${testWhileIdle}" />
        <property name="testOnBorrow" value = "${testOnBorrow}" />
        <property name="testOnReturn" value = "${testOnReturn}" />
        <property name="maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />
        <!-- 打开 removeAbandoned 功能 -->
        <property name="removeAbandoned" value = "${removeAbandoned}" />
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name="removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />
        <!-- 关闭 abanded 连接时输出错误日志 -->
        <property name="logAbandoned" value = "${logAbandoned}" />
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/xskq/mybatis/*.xml"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xskq.model" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--1.使用AOP的方式实现事务的配置-->
    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--配置事物-通知  -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="del*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <bean id="logAspect" class="com.xskq.aop.LogAspect"/>
    <!-- 配置事物-切面 -->
    <aop:config>
        <!-- 切入点表达式 -->
        <!--其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数-->
        <aop:pointcut id="txPoint" expression="execution(* com.xskq.service.*.*(..))"/>
        <!--<aop:pointcut id="" expression="execution(* com.xskq.service..*(..))"></aop:pointcut>-->
        <!-- 切面 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
        <aop:aspect id="logAop" ref="logAspect">
            <aop:before method="before" pointcut-ref="txPoint"/>
            <aop:after method="after" pointcut-ref="txPoint"/>
            <aop:after-returning method="afterReturn" returning="result" pointcut-ref="txPoint"/>
        </aop:aspect>
    </aop:config>

    <!--2.注解式事务配置-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>-->
    <!-- 使用annotation定义事务 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->
</beans>