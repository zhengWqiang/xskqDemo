#设置特定包的级别
log4j.rootLogger = DEBUG, stdout, DEBUG_FILE, ERROR_FILE

### Uncomment for MyBatis logging
log4j.logger.org.apache.ibatis=DEBUG

#org.apache.log4j.ConsoleAppender(控制台)
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n
#%d 输出日志时间点的日期或时间, 默认格式为ISO8601,也可以在其后指定格式,比如：%d{yyyy-MM-dd HH:mm:ss,SSS}
#%c 输出所属的类目, 通常就是所在类的全名
#%f 输出日志信息所属的类的类名
#%l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行
#%t 输出产生该日志事件的线程名
#%p 输出优先级, 从低到高即ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF;
#%m 输出代码中指定的消息
#%n 输出一个回车换行符, windows平台为”rn“ , Unix平台为”n“;
#%r 输出自应用启动到输出该日志信息所耗费的毫秒数

### 输出到日志文件 ###
#org.apache.log4j.RollingFileAppender(按大小滚动文件输出生成日志文件)
#org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)
log4j.appender.DEBUG_FILE = org.apache.log4j.RollingFileAppender
#log4j.appender.DEBUG_FILE.File=${user.home}/logs/debug.log
log4j.appender.DEBUG_FILE.File = logs/debug.log
log4j.appender.DEBUG_FILE.Append = true
# 输出DEBUG级别以上的日志
log4j.appender.DEBUG_FILE.Threshold = DEBUG
log4j.appender.DEBUG_FILE.Encoding = UTF-8
#文件大小到指定尺寸的时候产生一个新文件，配合RollingFileAppender使用
log4j.appender.DEBUG_FILE.MaxFileSize=20480KB
log4j.appender.DEBUG_FILE.MaxBackupIndex=25
log4j.appender.DEBUG_FILE.layout = org.apache.log4j.PatternLayout
log4j.appender.DEBUG_FILE.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n


### 保存异常信息到单独文件 ###
log4j.appender.ERROR_FILE = org.apache.log4j.DailyRollingFileAppender
log4j.appender.ERROR_FILE.File = logs/error.log ## 异常日志文件名
log4j.appender.ERROR_FILE.Append = true
## 只输出ERROR级别以上的日志!!!
log4j.appender.ERROR_FILE.Threshold = ERROR
log4j.appender.INFO_FILE.Encoding = UTF-8
log4j.appender.ERROR_FILE.layout = org.apache.log4j.PatternLayout
log4j.appender.ERROR_FILE.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n